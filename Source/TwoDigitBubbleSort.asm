;R0: LOAD INPUTS
;R1: ASCII OFFSET (-48)
;R4: COUNTER
;R3: COUNTER FOR INNERLOOP OF BUUBLESORT
;R6: STACK

.ORIG X3000
LEA R0, INPUT_NUMBERS1		;Set up for the first task
PUTS				;Taking input from the user
LEA R0, INPUT_NUMBERS2
PUTS
AND R2, R2, X0
AND R3, R3, X0
LD R1, ASCII
LD R4, COUNTER
LD R6, BASE
BR BEGIN

ERROR
LEA R0, ERROR_MSG		;PRINTS ERROR MESSAGE
PUTS				;IF INVALID INPUT IS GIVEN
AND R0, R0, X0

BEGIN
ST R4, SAVER1
JSR NTH_INPUT
LD R4, SAVER1
PUTS
GETC				;Get character from User
OUT				;Print out character
ADD R0, R0, R1			;Minus 48 from value, for ASCII offset
BRn ERROR			;If R0 is negative, it is an invalid value
ADD R0, R0, #-9			;Add -9
BRp ERROR			;If R0 is positive, it is an inavlid value
ADD R0, R0, #9			;Undo the ADD -9
JSR MULT10
ADD R2, R2, X0	
GETC
OUT
ADD R0, R0, R1
BRn ERROR
ADD R0, R0, #-9
BRp ERROR
ADD R0, R0, #9
ADD R0, R2, R0		
JSR PUSH			;Store in stack
LEA R0, NEWLINE			;adds a space in between values
PUTS
AND R2, R2, X0
AND R3, R3, X0
ADD R4, R4, #-1			;Increment counter
BRp BEGIN			;Branch if counter is still a positive integer
LD R4, COUNTER			;reload counter
LEA R0, NEWLINE			;data will now be printed on a new line
PUTS
AND R1, R1, X0			;clears R1, R2, R3
AND R2, R2, X0
AND R3, R3, X0
BR OUTER_LOOP

;DATA
ASCII	.FILL	#-48
COUNTER	.FILL	#8
SAVER1	.FILL	X3400
INNERLOOP_COUNTER	.FILL	#7
BASE	.FILL	X4000
BASE_END	.FILL	X400F
INPUT_NUMBERS1	.STRINGZ	"ENTER 8 NUMBERS RANGING FROM 0-99\n"
INPUT_NUMBERS2	.STRINGZ	"FOR 1 DIGIT NUMBERS, ENTER 0 FIRST\n\n"
ERROR_MSG	.STRINGZ	"\nINVALID INPUT, TRY AGAIN!\n"
SPACE	.STRINGZ	" "
NEWLINE	.STRINGZ	"\n"
ARRAY_SORTED	.STRINGZ	"\nARRAY IN ASCENDING ORDER:\n"
DASH	.STRINGZ	"-"

;BUBBLESORT			;begin bubble sort
OUTER_LOOP			;load and reloads counter for INNERLOOP
LD R5, INNERLOOP_COUNTER
ADD R4, R4, #-1			;Increment the outerloop counter
BRnz FINISH_SORT		;If the counter is zero or negative branch

INNERLOOP			;BEGIN INNERLOOP
JSR POP				;POP VALUE FROM STACK ONTO R0
ADD R1, R0, X0			;COPY R0 TO R1
LDR R0, R6, #0			;LOAD NEXT VALUE IN STACK INTO R0
ADD R2, R0, X0			;COPY R0 TO R2
NOT R1, R1			;1'S COMPLEMENT
ADD R1, R1, #1			;2'S COMPLEMENT
ADD R3, R2, R1			;ADD R2 AND R1 AND STORE IN R3
BRzp NO_SWITCH			;IF THE DIFFERENCE IS NEGATIVE OR ZERO
NOT R1, R1			;DO NOT SWITCH, OTHERWISE
ADD R1, R1, #1			;CONTINUE WITH THE PROGRAM
STR R1, R6, #0			;STORE VALUE IN INDEX I
STR R2, R6, #-1			;STORE VALUE IN INDEX I-1
NO_SWITCH
AND R1, R1, X0			;CLEAR REGISTERS 1, 2, AMD 3
AND R2, R2, X0
AND R3, R3, X0
ADD R5, R5, #-1			;INCREMENT INNERLOOP COUNTER
BRp INNERLOOP			;LOOP IF COUNTER STILL POSITIVE
ADD R6, R6, #-7			;RESET STACK POINTER TO THE TOP
BR OUTER_LOOP			;BRANCH BACK TO OUTERLOOP

FINISH_SORT			;IF STACK IS SORTED WE NOW DISPLAY THEM
LEA R0, ARRAY_SORTED
PUTS
AND R2, R2, X0
AND R3, R3, X0
LD R4, COUNTER			;RESET COUNTER
LD R1, ASCII			;LOAD ASCII OFFSET TO R1
NOT R1, R1
ADD R1, R1, #1			;-48 NOW BECOMES 48

DISPLAY
JSR POP				;POP VALUE INTO R0
ST R0, DIGIT1
JSR DIV10
LD R0, DIGIT2
ADD R0, R0, R1			;ADD ASCII OFFSET
OUT				;PRINT CHARACTER
LD R0, DIGIT1
ADD R0, R0, R1
OUT
ADD R4, R4, #-1			;INCREMENT COUNTER
BRz DONE			;IF ZERO BRANCH TO DONE
LEA R0, DASH			;PRINT "-" 
PUTS
BR DISPLAY			;LOOP THE DISPLAY 
DONE
LEA R0, FINISHMSG
PUTS
HALT				;FINISH PROGRAM

PUSH
ADD R6, R6, #-1
STR R0, R6, #0
RET

POP
LDR R0, R6, #0
ADD R6, R6, #1
RET

MULT10
ADD R3, R0, R0	;R3 = 2R0
ADD R2, R3, R3	;R2 = 4R0
ADD R2, R2, R2	;R2 = 8R0
ADD R2, R2, R3	;R2 - 10R0
RET

DIV10
LD R0, DIGIT1
ADD R0, R0, X-A
BRn DONEDIV
ST R0, DIGIT1
ADD R2, R2, #1
ADD R0, R0, X-A
BRzp DIV10
DONEDIV
ST R2, DIGIT2
AND R2, R2, X0
RET

NTH_INPUT
ADD R4, R4, #-1
BRp SKIP1
LEA R0, INPUT08
RET
SKIP1
ADD R4, R4, #-1
BRp SKIP2
LEA R0, INPUT07
RET

SKIP2
ADD R4, R4, #-1
BRp SKIP3
LEA R0, INPUT06
RET

SKIP3
ADD R4, R4, #-1
BRp SKIP4
LEA R0, INPUT05
RET

SKIP4
ADD R4, R4, #-1
BRp SKIP5
LEA R0, INPUT04
RET

SKIP5
ADD R4, R4, #-1
BRp SKIP6
LEA R0, INPUT03
RET

SKIP6
ADD R4, R4, #-1
BRp SKIP7
LEA R0, INPUT02
RET

SKIP7
LEA R0, INPUT01
RET

;DATA
FINISHMSG	.STRINGZ	"\n\nPROGRAM DONE!\n"
INPUT01	.STRINGZ	"1st NUMBER >> "
INPUT02	.STRINGZ	"2nd NUMBER >> "
INPUT03	.STRINGZ	"3rd NUMBER >> "
INPUT04	.STRINGZ	"4th NUMBER >> "
INPUT05	.STRINGZ	"5th NUMBER >> "
INPUT06	.STRINGZ	"6th NUMBER >> "
INPUT07	.STRINGZ	"7th NUMBER >> "
INPUT08	.STRINGZ	"8th NUMBER >> "
DIGIT1	.FILL	X3500
DIGIT2	.FILL	X3501
SAVE	.FILL	X3502
;ARRAY	.BLKW	#8
.END